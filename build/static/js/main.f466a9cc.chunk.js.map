{"version":3,"sources":["components/navbar/index.js","components/order-info/index.js","components/steps/index.js","services/payment.service.js","views/payment/index.js","App.js","serviceWorker.js","index.js"],"names":["PageNavbar","img","src","alt","brand","this","className","alignLinks","href","Component","OrderDetail","Steps","Fragment","props","type","steps","map","step","index","active","length","total","PaymentService","_defaultUrl","saveCard","cardInfo","mockCaller","url","payload","error","console","log","Promise","resolve","reject","code","message","Payment","applyMask","elementID","mask","element","document","getElementById","maskOptions","IMask","handleChange","event","target","value","checked","name","nodeName","getElementsByClassName","classList","remove","focusCard","setState","focused","sendCardInfo","e","preventDefault","checkFormErros","state","then","result","alert","form","invalidForm","elements","i","contains","cardPortions","errorSpan","createElement","setAttribute","parentNode","insertBefore","nextSibling","add","cardNumber","cardCode","cardName","cardDate","number","expiry","cvc","noValidate","onSubmit","id","onChange","s","label","validate","required","large","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kYA0BeA,G,uNAjBXC,IAAM,yBAAKC,IAAI,mBAAmBC,IAAI,S,wEAGlC,OAEI,kBAAC,SAAD,CAAQC,MAAOC,KAAKJ,IAAKK,UAAU,YAAaC,WAAW,SACvD,kBAAC,UAAD,CAASC,KAAK,GAAGF,UAAU,aAC3B,kBAAC,UAAD,CAASE,KAAK,GAAGF,UAAU,aAC3B,kBAAC,UAAD,CAASE,KAAK,GAAGF,UAAU,aAC3B,kBAAC,UAAD,CAASE,KAAK,GAAGF,UAAU,aAC3B,kBAAC,UAAD,CAASE,KAAK,GAAGF,UAAU,kB,GAblBG,cCgBVC,G,uLAfP,OACI,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,SACf,6BACA,yBAAKA,UAAU,cAHnB,IAGsC,yBAAKA,UAAU,eACjD,yBAAKA,UAAU,cAJnB,IAIsC,yBAAKA,UAAU,eACjD,yBAAKA,UAAU,cALnB,IAKsC,yBAAKA,UAAU,eAGjD,yBAAKA,UAAU,qBARnB,IAQ6C,yBAAKA,UAAU,2B,GAX9CG,cC8CXE,G,uLA3CD,IAAD,OACL,OACI,kBAAC,IAAMC,SAAP,KACyB,YAApBP,KAAKQ,MAAMC,KAEP,yBAAKR,UAAU,qBACXD,KAAKQ,MAAME,MAAMC,IAAI,SAACC,EAAMC,GACzB,OAAI,EAAKL,MAAMM,OAAS,IAAOD,EAEvB,kBAAC,IAAMN,SAAP,KACI,0BAAMN,UAAU,WAAU,uBAAGA,UAAU,uBAAb,UACzBW,EACCC,EAAQ,EAAK,EAAKL,MAAME,MAAMK,OAAS,uBAAGd,UAAU,wBAAb,iBAAuD,IAKpG,kBAAC,IAAMM,SAAP,KACI,8BAAOM,EAAQ,GADnB,IAC8BD,EACxBC,EAAQ,EAAK,EAAKL,MAAME,MAAMK,OAAS,uBAAGd,UAAU,wBAAb,iBAAuD,OAYhH,yBAAKA,UAAU,aACX,uBAAGA,UAAU,wBAAb,gBACA,uBAAGE,KAAK,MAAK,yCAAeH,KAAKQ,MAAMM,QAAvC,OAA4Dd,KAAKQ,MAAMQ,MAAvE,W,GAlCRZ,cCiBLa,E,iDArBXC,YAAc,kB,KAEdC,SAAW,SAACC,GAER,OAAO,EAAKC,WAAW,SAAUD,GADZ,I,KAKzBC,WAAa,SAACC,EAAKC,EAASC,GAExB,OADAC,QAAQC,IAAI,cAAZ,eAAmC,EAAKR,YAAxC,YAAuDI,EAAvD,mBACO,IAAIK,QAAQ,SAACC,EAASC,GACtBL,GACCK,EAAO,CAAEC,KAAM,IAAKC,QAAS,4CAGjCH,EAAQ,CAAEE,KAAM,IAAKC,QAAS,qCC+Q3BC,G,kBA7QX,aAAe,IAAD,8BACV,+CA0BJC,UAAY,SAACC,EAAWC,GACpB,IAAIC,EAAUC,SAASC,eAAeJ,GAClCK,EAAc,CAAEJ,KAAMA,GAE1BK,IAAMJ,EAASG,IA/BL,EAsCdE,aAAe,SAACC,GACZ,IAAMC,EAASD,EAAMC,OACfC,EAAwB,aAAhBD,EAAOlC,KAAsBkC,EAAOE,QAAUF,EAAOC,MAC7DE,EAAOH,EAAOG,KAEG,WAApBH,EAAOI,UACaV,SAASW,uBAAuB,mBAAmB,GAC1DC,UAAUC,OAAO,WAGjC,EAAKC,UAAUL,EAAMF,GAErB,EAAKQ,SAAL,eACKN,EAAOF,KAnDF,EA4DdO,UAAY,SAACL,EAAMF,GACf,OAAOE,GACH,IAAK,aACD,EAAKM,SAAS,CAAEC,QAAS,WAC7B,MACA,IAAK,WACD,EAAKD,SAAS,CAAEC,QAAS,SAC7B,MACA,IAAK,WACGT,EAGA,EAAKQ,SAAS,CAAEC,QAAS,QAFzB,EAAKD,SAAS,CAAEC,QAAS,WAIjC,MACA,IAAK,WACD,EAAKD,SAAS,CAAEC,QAAS,WAC7B,MACA,QACI,EAAKD,SAAS,CAAEC,QAAS,aA/EvB,EAqFdC,aAAe,SAACC,IACZA,EAAEC,iBACE,EAAKC,eAAeF,EAAEZ,WAGC,IAAI1B,GACZE,SAAS,EAAKuC,OAAOC,KAAK,SAACC,GACtCC,MAAMD,EAAO7B,YA5FX,EAqGd0B,eAAiB,SAACK,GAId,IAHA,IAAIC,GAAc,EACZC,EAAWF,EAAKE,SAEbC,EAAI,EAAGA,EAAID,EAASjD,OAAOkD,IAChC,GAAID,EAASC,KACiB,UAAzBD,EAASC,GAAGlB,UAAiD,WAAzBiB,EAASC,GAAGlB,YAC7C,EAAKW,MAAMM,EAASC,GAAGnB,MAQ3B,GAAIkB,EAASC,GAAGhB,UAAUiB,SAAS,oBAO/B,IAAI,EAAKR,MAAMS,eACP9B,SAASC,eAAe,gBAAiB,CACzC,IAAI8B,EAAY/B,SAASgC,cAAc,QACvCD,EAAUE,aAAa,KAAM,gBAC7BF,EAAUE,aAAa,QAAS,eAChCF,EAAUE,aAAa,aAAc,qCAErCN,EAASC,GAAGM,WAAWC,aAAaJ,EAAWJ,EAASC,GAAGQ,aAE3DT,EAASC,GAAGhB,UAAUyB,IAAI,iBAflCX,GAAc,EACdC,EAASC,GAAGhB,UAAUyB,IAAI,WAuBtC,OAAOX,GAzIP,EAAKL,MAAQ,CACTiB,WAAY,GACZC,SAAU,GACVC,SAAU,GACVC,SAAU,GACVX,aAAc,IATR,E,iFAkBVnE,KAAKiC,UAAU,aAAc,uBAC7BjC,KAAKiC,UAAU,WAAY,SAC3BjC,KAAKiC,UAAU,WAAY,S,+BA6H3B,OACI,6BAEI,kBAAC,EAAD,MAEA,yBAAKhC,UAAU,6BACX,yBAAKA,UAAU,oBAGX,yBAAKA,UAAU,kBAEX,kBAAC,EAAD,CAAOQ,KAAK,SAASK,OAAQ,EAAGE,MAAO,IAEvC,uBAAGb,KAAK,MAAK,uBAAGF,UAAU,wBAAb,gBAAb,+BAEA,yBAAKA,UAAU,YACX,2BACI,yBAAKJ,IAAI,wBAAwBC,IAAI,cACrC,iDAAsB,6BAAtB,8BAIR,yBAAKG,UAAU,eACX,kBAAC,IAAD,CACI8E,OAAQ/E,KAAK0D,MAAMiB,WACnB7B,KAAM9C,KAAK0D,MAAMmB,SACjBG,OAAQhF,KAAK0D,MAAMoB,SACnBG,IAAKjF,KAAK0D,MAAMkB,SAChBvB,QAASrD,KAAK0D,MAAML,YAQhC,yBAAKpD,UAAU,kBAEX,kBAAC,EAAD,CAAOQ,KAAK,UAAUK,OAAQ,EAC1BJ,MAAO,CAAC,WAAY,YAAa,uBAErC,yBAAKT,UAAU,OAEX,0BAAMiF,YAAU,EAACC,SAAUnF,KAAKsD,cAC5B,kBAAC,YAAD,CACI8B,GAAG,aACHtC,KAAK,aACLuC,SAAUrF,KAAKyC,aACf6C,EAAG,GACH9D,MAAM,qCACN+D,MAAM,yBACNC,UAAU,EACVC,UAAQ,IAEZ,kBAAC,YAAD,CACIL,GAAG,WACHtC,KAAK,WACLuC,SAAUrF,KAAKyC,aACf6C,EAAG,GACH9D,MAAM,2BACN+D,MAAM,4BACNC,UAAU,EACVC,UAAQ,IAEZ,kBAAC,YAAD,CACI3C,KAAK,WACLsC,GAAG,WACHC,SAAUrF,KAAKyC,aACf6C,EAAG,EACH9D,MAAM,mBACN+D,MAAM,WACNC,UAAU,EACVC,UAAQ,IAEZ,kBAAC,YAAD,CACI3C,KAAK,WACLsC,GAAG,WACHC,SAAUrF,KAAKyC,aACf6C,EAAG,EACH9D,MAAM,wBACN+D,MAAM,MACNC,UAAU,EACVC,UAAQ,IAEZ,kBAAC,SAAD,CACIJ,SAAUrF,KAAKyC,aACfK,KAAK,eACLwC,EAAG,GACH9D,MAAM,oCACNgE,UAAU,EACVC,UAAQ,GACJ,4BAAQ7C,MAAM,IAAd,yBAGA,4BAAQA,MAAM,KAAd,iCAKR,yBAAK3C,UAAU,qBACX,kBAAC,SAAD,CAAQQ,KAAK,SAASiF,OAAK,GAA3B,iBAUhB,kBAAC,EAAD,a,GAjQFtF,cCPPuF,MARf,WACE,OACE,yBAAK1F,UAAU,OACb,kBAAC,EAAD,QCMc2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7D,SAASC,eAAe,SD2H3C,kBAAmB6D,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.f466a9cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Navbar, NavItem } from 'react-materialize';\r\n\r\n//Carregandos estilos da navbar\r\nimport './navbar.css';\r\n\r\nclass PageNavbar extends Component {\r\n\r\n    //Logotipo da navbar\r\n    img = <img src=\"/images/logo.png\" alt=\"logo\"/>;\r\n\r\n    render() {\r\n        return (\r\n            //Navbar\r\n            <Navbar brand={this.img} className=\"white nav\"  alignLinks=\"right\">\r\n                <NavItem href=\"\" className=\"nav-item\"></NavItem>\r\n                <NavItem href=\"\" className=\"nav-item\"></NavItem>\r\n                <NavItem href=\"\" className=\"nav-item\"></NavItem>\r\n                <NavItem href=\"\" className=\"nav-item\"></NavItem>\r\n                <NavItem href=\"\" className=\"nav-item\"></NavItem>\r\n            </Navbar>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PageNavbar;","import React, { Component }  from 'react';\r\n\r\n//importando estilo do componente\r\nimport './order-info.css';\r\n\r\nclass OrderDetail extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"info-container\">\r\n                <div className=\"info\"></div>\r\n                <hr/>\r\n                <div className=\"info left\"></div> <div className=\"info right\"></div>\r\n                <div className=\"info left\"></div> <div className=\"info right\"></div>\r\n                <div className=\"info left\"></div> <div className=\"info right\"></div>\r\n                \r\n                \r\n                <div className=\"info left result\"></div> <div className=\"info right result\"></div>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default OrderDetail;","import React, { Component } from 'react';\r\n\r\n//Importando estilo da página\r\nimport './steps.css';\r\n\r\n\r\n//Componente generico para visualização de passos\r\nclass Steps extends Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.type === 'desktop'?\r\n                    \r\n                    (<div className=\"row desktop-steps\">\r\n                        {this.props.steps.map((step, index) => {\r\n                            if((this.props.active - 1) === index) {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <span className=\"checked\"><i className=\"Tiny material-icons\">check</i></span> \r\n                                        {step}\r\n                                        {(index + 1) < this.props.steps.length? (<i className=\"small material-icons\">chevron_right</i>):''}\r\n                                    </React.Fragment>\r\n                                )\r\n                            } else {\r\n                                return (\r\n                                    <React.Fragment>\r\n                                        <span>{index + 1}</span> {step} \r\n                                        {(index + 1) < this.props.steps.length? (<i className=\"small material-icons\">chevron_right</i>):''}\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            \r\n                        })}\r\n                        \r\n                    </div>)\r\n                    \r\n                    :\r\n\r\n                    (\r\n                        <div className=\"step-info\">\r\n                            <i className=\"small material-icons\">chevron_left</i>\r\n                            <a href=\"#!\"><strong>Etapa {this.props.active}</strong> de {this.props.total} </a>\r\n                        </div>\r\n                    )\r\n                }\r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Steps;","\r\nclass PaymentService {\r\n\r\n    _defaultUrl = 'http://mock-api'\r\n\r\n    saveCard = (cardInfo) => {\r\n        let isErrorPromise = false;\r\n        return this.mockCaller('/pagar', cardInfo, isErrorPromise);\r\n    }\r\n\r\n    /* metodo que simula uma chamada http retornando uma promise */\r\n    mockCaller = (url, payload, error) => {\r\n        console.log('chamada api', `URL: ${this._defaultUrl}/${url}, Method: POST`)\r\n        return new Promise((resolve, reject) => {\r\n            if(error) {\r\n                reject({ code: 400, message: 'Não foi possivel salvar o cartão!' })\r\n            }\r\n\r\n            resolve({ code: 200, message: 'Cartão salvo com sucesso!' })\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport default PaymentService;","import React, { Component } from 'react';\r\nimport { TextInput, Select, Button } from 'react-materialize';\r\n\r\nimport Cards from 'react-credit-cards';\r\nimport IMask from 'imask';\r\nimport 'react-credit-cards/es/styles-compiled.css';\r\n\r\n//Importando componentes internos a serem utilizados na página\r\nimport PageNavbar from '../../components/navbar';\r\nimport OrderInfo from '../../components/order-info';\r\nimport Steps from '../../components/steps';\r\n\r\n//Importando servico que chama\r\nimport PaymentService from './../../services/payment.service';\r\n\r\n//Carregando as classes css da pagina\r\nimport './payment.css';\r\n\r\nclass Payment extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        //Iniciando os valores do formulario\r\n        this.state = {\r\n            cardNumber: '',\r\n            cardCode: '',\r\n            cardName: '',\r\n            cardDate: '',\r\n            cardPortions: ''\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Utilizando o método nativo do react que é disparado logo após o componente ser\r\n    * renderizado para aplicar as mascaras utilizando o componente IMask\r\n    */\r\n    componentDidMount() {\r\n        this.applyMask('cardNumber', '0000 0000 0000 0000'); \r\n        this.applyMask('cardDate', '00/00');\r\n        this.applyMask('cardCode', '000'); \r\n    }\r\n\r\n    /*\r\n    * Extraindo a lógica de aplicação de mascara em um input\r\n    * evitando assim repetição de código.\r\n    */\r\n    applyMask = (elementID, mask) => {\r\n        let element = document.getElementById(elementID);\r\n        let maskOptions = { mask: mask };\r\n\r\n        IMask(element, maskOptions);\r\n    }\r\n\r\n    /*\r\n    * Método chamado no evento onChange dos inputs para atualizar os valores\r\n    * dos mesmos em suas respectivas variavies de estado do react.\r\n    */\r\n    handleChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n\r\n        if(target.nodeName === 'SELECT') {\r\n            let inputSelect =  document.getElementsByClassName('select-dropdown')[0];\r\n            inputSelect.classList.remove('invalid');\r\n        }\r\n\r\n        this.focusCard(name, value);\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n\r\n    /*\r\n    * Método que verifica qual o input que o usuário está interagindo no momento\r\n    * e aplica o foco no compomente de cartão.\r\n    */\r\n    focusCard = (name, value) => {\r\n        switch(name) {\r\n            case 'cardNumber':\r\n                this.setState({ focused: \"number\" });\r\n            break;\r\n            case 'cardName':\r\n                this.setState({ focused: \"name\" });\r\n            break;\r\n            case 'cardCode':\r\n                if(!value) {\r\n                    this.setState({ focused: \"number\" });\r\n                } else {\r\n                    this.setState({ focused: \"cvc\" });\r\n                }\r\n            break; \r\n            case 'cardDate':\r\n                this.setState({ focused: \"expiry\" });\r\n            break;\r\n            default:\r\n                this.setState({ focused: \"number\" });\r\n        }\r\n    }\r\n\r\n\r\n    /* Método chamado ao enviar o formulario (onSubmit) */\r\n    sendCardInfo = (e) => {\r\n        e.preventDefault();\r\n        if(!this.checkFormErros(e.target)) {\r\n            \r\n            /* chamando servico mock para salvar cartão */\r\n            const paymentService = new PaymentService();\r\n            paymentService.saveCard(this.state).then((result) => {\r\n                alert(result.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    /* \r\n    *  Método que valida se os inputs estão preenchidos e caso \r\n    *  não estejam adiciona o feedback negativo na tela através da classe invalid\r\n    */\r\n    checkFormErros = (form) => {\r\n        let invalidForm = false;\r\n        const elements = form.elements;\r\n\r\n        for (var i = 0; i < elements.length;i++) {\r\n            if( elements[i] && \r\n                (elements[i].nodeName === 'INPUT' || elements[i].nodeName === 'SELECT') \r\n                && !this.state[elements[i].name]) {\r\n\r\n                /* \r\n                *\r\n                * Verificando se o input não é dropdown validando assim somente \r\n                * o select e não o input criado pelo component react-materialize.\r\n                * \r\n                */\r\n                if(!elements[i].classList.contains('select-dropdown')) {\r\n                    invalidForm = true;\r\n                    elements[i].classList.add(\"invalid\");\r\n                } else {\r\n                    /* Adicionando mensagem de erro no select manualmente devido ao framework \r\n                     * não validar o select como faz nos inputs \r\n                    */\r\n                    if(!this.state.cardPortions) {\r\n                        if(!document.getElementById('select-error')) {\r\n                            var errorSpan = document.createElement(\"SPAN\");\r\n                            errorSpan.setAttribute('id', 'select-error');\r\n                            errorSpan.setAttribute('class', 'helper-text');\r\n                            errorSpan.setAttribute('data-error', 'Selecione o número de parcelas');\r\n        \r\n                            elements[i].parentNode.insertBefore(errorSpan, elements[i].nextSibling);\r\n\r\n                            elements[i].classList.add(\"invalid\");\r\n                        }\r\n                    }\r\n                   \r\n                }\r\n               \r\n            }\r\n        }\r\n\r\n        return invalidForm;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* utilizando a navbar importada na página */}\r\n                <PageNavbar></PageNavbar>\r\n\r\n                <div className=\"content payment-container\">\r\n                    <div className=\"row flex-content\">\r\n                        \r\n                        {/* Div contendo as informações do lado esquerdo (parte em vermelho) do pagamento */}\r\n                        <div className=\"card-container\">\r\n                            \r\n                            <Steps type=\"mobile\" active={2} total={3} />\r\n                            \r\n                            <a href=\"#!\"><i className=\"small material-icons\">chevron_left</i> Alterar forma de pagamento</a>\r\n                            \r\n                            <div className=\"add-card\">\r\n                                <p>\r\n                                    <img src=\"/images/card-icon.png\" alt=\"card icon\"/>\r\n                                    <span>Adicione um novo<br/> cartão de crédito</span>\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"credit-card\">\r\n                                <Cards\r\n                                    number={this.state.cardNumber}\r\n                                    name={this.state.cardName}\r\n                                    expiry={this.state.cardDate}\r\n                                    cvc={this.state.cardCode}\r\n                                    focused={this.state.focused}\r\n                                    />\r\n                            </div>\r\n                            \r\n                        </div>\r\n                        {/* Fim div card-container */}\r\n\r\n                        {/* Div contendo as informações do lado direito (formulario) do pagamento */}\r\n                        <div className=\"form-container\">\r\n\r\n                            <Steps type=\"desktop\" active={1}\r\n                                steps={['Carrinho', 'Pagamento', 'Confirmação']} />\r\n\r\n                            <div className=\"row\">\r\n\r\n                                <form noValidate onSubmit={this.sendCardInfo}>\r\n                                    <TextInput\r\n                                        id=\"cardNumber\"\r\n                                        name=\"cardNumber\"\r\n                                        onChange={this.handleChange} \r\n                                        s={12} \r\n                                        error=\"Número do cartão inválido\"\r\n                                        label=\"Número do cartão\"\r\n                                        validate={true}\r\n                                        required />\r\n\r\n                                    <TextInput\r\n                                        id=\"cardName\"\r\n                                        name=\"cardName\"\r\n                                        onChange={this.handleChange}\r\n                                        s={12}\r\n                                        error=\"Insira seu nome completo\" \r\n                                        label=\"Nome (igual ao cartão)\"\r\n                                        validate={true}\r\n                                        required />\r\n\r\n                                    <TextInput\r\n                                        name=\"cardDate\"\r\n                                        id=\"cardDate\"\r\n                                        onChange={this.handleChange}\r\n                                        s={6}\r\n                                        error=\"Data inválida\" \r\n                                        label=\"Validade\"\r\n                                        validate={true}\r\n                                        required />\r\n\r\n                                    <TextInput\r\n                                        name=\"cardCode\"\r\n                                        id=\"cardCode\"\r\n                                        onChange={this.handleChange}\r\n                                        s={6}\r\n                                        error=\"Código inválido\" \r\n                                        label=\"CVV\"\r\n                                        validate={true}\r\n                                        required />\r\n\r\n                                    <Select\r\n                                        onChange={this.handleChange}\r\n                                        name=\"cardPortions\"\r\n                                        s={12}\r\n                                        error=\"Selecione o número de parcelas\"\r\n                                        validate={true}\r\n                                        required>\r\n                                            <option value=\"\">\r\n                                                Número de parcelas\r\n                                            </option>\r\n                                            <option value=\"1\">\r\n                                            12 x de R$ 1000,00 sem juros\r\n                                            </option>\r\n                                    </Select>\r\n\r\n                                    <div className=\"row submit-button\">\r\n                                        <Button type=\"submit\" large>Continuar</Button>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                            {/* fim row */}\r\n                            \r\n                        </div>\r\n                        {/* Fim div form-container */}\r\n                        \r\n                        {/* importando componente com informações do pedido */}\r\n                        <OrderInfo/>\r\n\r\n                    </div>\r\n                    {/* Fim flex-content */}\r\n                   \r\n\r\n                </div>\r\n                {/* Fim pagamento-container */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Payment;","import React from 'react';\r\nimport Payment from './views/payment';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Payment></Payment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}